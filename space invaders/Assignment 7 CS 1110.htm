<!DOCTYPE html>
<!-- saved from url=(0070)http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script>(function(){var e,t=window.open,r=document.createElement,o=HTMLElement.prototype.appendChild,i=document.createEvent,a={},s=0,u=null,l=window.innerWidth,c=window.innerHeight,f=window.parent,p=window.location!=window.parent.location?document.referrer:document.location.href;function d(){var n=arguments,r=!0,o=null;function i(e){f.postMessage({type:"blockedWindow",args:JSON.stringify(e)},p)}function s(e){var t=e[1];return null!=t&&["_blank","_parent","_self","_top"].indexOf(t)<0?t:null}var u,d,h=null,g=null,m=null;null!=window.event&&(h=window.event.currentTarget,g=window.event.srcElement),null!=g&&g instanceof HTMLElement&&(m=g.closest("a"))&&m.href&&(n[3]=m.href);try{if(null==h){for(var v=n.callee;null!=v.arguments&&null!=v.arguments.callee.caller;)v=v.arguments.callee.caller;null!=v.arguments&&v.arguments.length>0&&null!=v.arguments[0].currentTarget&&(h=v.arguments[0].currentTarget)}}catch(e){}null==h?(window.pbreason="Blocked a new window opened without any user interaction",r=!1):null!=h&&(h instanceof Window||function(){try{return!!(parent.Window&&h instanceof parent.Window)}catch(e){return!1}}()||h===document||null!=h.URL&&null!=h.body||null!=h.nodeName&&("body"==h.nodeName.toLowerCase()||"document"==h.nodeName.toLowerCase()))?(window.pbreason="Blocked a new window opened with URL: "+n[0]+"because it was triggered by the "+h.nodeName+" element",r=!1):(d=(u=h)&&u.style)&&/fixed|absolute/.test(d.position)&&u.offsetWidth>=.6*l&&u.offsetHeight>=.75*c?(window.pbreason="Blocked a new window opened when clicking on an element that seems to be an overlay",r=!1):r=!0;document.webkitFullscreenElement||document.mozFullscreenElement||document.fullscreenElement;if(((new Date).getTime()-e<1e3||isNaN(e)&&(document.fullScreenElement&&null!==document.fullScreenElement||null!=document.mozFullscreenElement||null!=document.webkitFullscreenElement))&&(window.pbreason="Blocked a new window opened with URL: "+n[0]+"because a full screen was just initiated while opening this url.",document.exitFullscreen?document.exitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitCancelFullScreen&&document.webkitCancelFullScreen(),r=!1),1==r){if(o=t.apply(this,n),null!=(x=s(n))&&(a[x]=o),o!==window){var y=(new Date).getTime(),b=o.blur;o.blur=(()=>{(new Date).getTime()-y<1e3?(window.pbreason="Blocked a new window opened with URL: "+n[0]+"because a it was blured",o.close(),i(n)):b()})}}else{var x,w={href:n[0],replace:function(e){w.href=e}};if(o={close:function(){return!0},test:function(){return!0},blur:function(){return!0},focus:function(){return!0},showModelessDialog:function(){return!0},showModalDialog:function(){return!0},prompt:function(){return!0},confirm:function(){return!0},alert:function(){return!0},moveTo:function(){return!0},moveBy:function(){return!0},resizeTo:function(){return!0},resizeBy:function(){return!0},scrollBy:function(){return!0},scrollTo:function(){return!0},getSelection:function(){return!0},onunload:function(){return!0},print:function(){return!0},open:function(){return this},opener:window,closed:!1,innerHeight:480,innerWidth:640,name:n[1],location:w,document:{location:w}},function(e,t){var n;for(n in e)try{void 0===t[n]&&(t[n]=e[n])}catch(e){}}(window,o),o.window=o,null!=(x=s(n)))try{a[x].close()}catch(e){}var T=function(){var e;e=o.location instanceof Object?o.document.location instanceof Object?null!=w.href?w.href:n[0]:o.document.location:o.location,n[0]=e,i(n)};top==self?setTimeout(T,100):T()}return o}function h(t){e=t?(new Date).getTime():NaN}Object.defineProperty(window,"BetterJsPop",{value:void 0,writable:!1}),window.originalOpenFunction=window.open,window.open=function(){try{return d.apply(this,arguments)}catch(e){return null}},HTMLElement.prototype.appendChild=function(){var e=o.apply(this,arguments);if("IFRAME"==e.nodeName&&e.contentWindow)try{var t=document.createElement("script");t.textContent=n;var r=e.contentWindow.document;(r.head||r.body).appendChild(t)}catch(e){}return e},document.createElement=function(e){var t=r.apply(document,arguments);if("a"==e.toLowerCase()){s=(new Date).getTime();var n=t.dispatchEvent;t.dispatchEvent=function(e){return null!=e.type&&"click"==(""+e.type).toLocaleLowerCase()?(window.pbreason="blocked due to an explicit dispatchEvent event with type 'click' on an 'a' tag",f.postMessage({type:"blockedWindow",args:JSON.stringify({0:t.href})},p),!0):n(e)},u=t}return t},document.createEvent=function(){try{if(arguments[0].toLowerCase().includes("mouse")&&(new Date).getTime()-s<=50){var e,t,n;try{e=new URL(u.href).hostname}catch(e){}try{t=window.location!=window.parent.location?document.referrer:document.location.href}catch(e){}try{n=new URL(t).hostname}catch(e){}var r=e==n;if(u.href.trim()&&!r)return window.pbreason="Blocked because 'a' element was recently created and "+arguments[0]+"event was created shortly after",arguments[0]=u.href,f.postMessage({type:"blockedWindow",args:JSON.stringify({0:u.href})},p),{type:"click",initMouseEvent:function(){}}}return i.apply(document,arguments)}catch(e){}},document.addEventListener("fullscreenchange",function(){h(document.fullscreen)},!1),document.addEventListener("mozfullscreenchange",function(){h(document.mozFullScreen)},!1),document.addEventListener("webkitfullscreenchange",function(){h(document.webkitIsFullScreen)},!1)})()</script>
	
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">

	<title>Assignment 7 CS 1110</title>
	<link rel="stylesheet" href="./Assignment 7 CS 1110_files/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	<meta name="description" content="Programming and problem solving using Python. Emphasizes principles of software development, style, and testing. Topics include procedures and functions, iteration, recursion, arrays and vectors, strings, an operational model of procedure and function calls, algorithms, exceptions, object-oriented programming, and GUIs (graphical user interfaces). Weekly labs provide guided practice on the computer, with staff present to help.">

	<link rel="canonical" href="http://www.cs.cornell.edu/courses/cs1110/2019sp/">

	<link href="./Assignment 7 CS 1110_files/css" rel="stylesheet" type="text/css">
	<link href="./Assignment 7 CS 1110_files/css(1)" rel="stylesheet" type="text/css">

	<link href="./Assignment 7 CS 1110_files/bootstrap.min(1).css" rel="stylesheet">
	<link rel="stylesheet" href="./Assignment 7 CS 1110_files/main.css">
    <style>
        html {
            height: 100%;
        }
        body {
            height: calc(100% - 50px);
        }
        #project-wrapper {
            position: relative;
            height: 100%;
            margin-top: 50px;
            overflow-y: scroll;
        }
        .tab-content {
            padding-top: 1px;
        }

        img {
            padding: 12px;
        }
        blockquote.code-description {
            font-size: 14px;
        }
        table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
            padding: 15px;
        }

        #rec-table {
        border: 0px white !important;
        }
    </style>
  </head>

<body>

    <nav id="project-navbar" class="navbar navbar-default navbar-fixed-top">
        <div class="container">
          <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse" aria-expanded="false">
              <span class="sr-only">Toggle navigation</span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#main"><span class="hidden-sm">A7</span></a>
          </div>
          <div class="collapse navbar-collapse" id="project-navbar-collapse">
            <ul class="nav navbar-nav">
              <li class="active"><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#overview">Overview</a></li>
              <li><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#toc">Table of Contents</a></li>
              <li><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#started">Before You Start</a></li>
              <li><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#invaders">Alien Invaders</a></li>
              <li><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic">Basic Game</a></li>
              <li><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend">Extend</a></li>
              <li><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#finishing">Finishing Up</a></li>
              <li><a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/">A7 API</a></li>
            </ul>
          </div>
        </div>
    </nav>
        <div id="project-wrapper" data-spy="scroll" data-target="#project-navbar">
            <div class="container">
            <div id="main" class="container">
                <div class="container" id="mainContent">
                <div id="main" class="tab-content">
                    <h1>Assignment 7 - Alien Invaders</h1>
                    <p class="lead">CS 1110 Spring 2019</p>
                    <p class="lead"><b>Due</b> to <a href="https://cms.csuglab.cornell.edu/">CMS</a> by Tuesday, May 7, 2019 @ 11:59pm</p>
                    <hr>
        </div>



        <div id="overview" class="tab-content">

                <table align="right"><tbody><tr><td>
                <div style="left:50%; width:532; border: solid 0 #060; border-left-width:2px; border-right-width:2px; border-top-width:2px; border-bottom-width:2px; padding-left:0.5ex">
                <video width="532" height="480" controls="controls">
                  <source src="http://cs1110.cs.cornell.edu/video/AlienHigh.mp4" type="video/mp4">
                Your browser does not support the video tag.
                </video>
                </div>
                </td></tr></tbody></table>

          <h2>Overview</h2>
          <p>
                The final assignment for CS 1110 is a tribute to the classic arcade game
                <a href="https://en.wikipedia.org/wiki/Space_Invaders">Space Invaders</a>.
                </p>

                <p>
                There are a few versions of this game online, so if
                you have never played Space Invaders before, play
                this <a href="http://www.pacxon4u.com/space-invaders/">Pacxon
                version</a>to get a good idea of the gameplay.  (This
                is the most authentic version that we have found --
                possibly a bit <em>too</em> authentic and potentially
                running afoul
                of <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#academic-copyright">copyright issues</a>.
                </p>

                <p>
                One of the main challenges with this assignment is its scope is completely up to you.
                There is a bare minimum of functionality that you must implement. You must implement
                a complete, single wave of Space Invaders.  But after that point, you are free
                (and encouraged) to add more <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend">interesting features</a> to your game.
                The video to the right shows our solution, which has several extra features such as
                sound and basic animation. You can even look at more advanced shooting games like
                <i><a href="https://en.wikipedia.org/wiki/Galaxian">Galaxian</a></i> and
                <i><a href="https://en.wikipedia.org/wiki/Galaga">Galaga</a></i> for inspiration.
                You are permitted to do anything that you want, provided that the basic functionality
                is there.

                </p><p>
                Despite any difficulties you might have had with previous assignments, we know
                that this assignment is easily within your grasp.  You just have to start early,
                break the problem up into manageable pieces, and program/test incrementally. Below,
                we discuss stages of implementation and give suggestions for staying on top of the
                project. If you follow our advice and test each piece thoroughly before proceeding
                to the next, you should be successful.
                </p>

                <p>
                Our bare minimum solution is about 875 lines of code (including specifications and comments).
                This is ~225 lines in <tt>app.py</tt> (including the ~155 lines already there), ~380
                lines in <tt>wave.py</tt> (including the ~75 lines already there), and ~270 lines in
                <tt>models.py</tt> (including the ~130 lines already there).  So you should expect
                to write just a little over 500 lines of code for the bare minimum solution. While this
                may seem intimidating, a good amount of that consists of headers and specification.
                Our minimum solution has ~20 methods across five classes, not including getters and setters.
                </p>

                <hr width="50%">
        </div>




        <h3>Learning Objectives</h3>

        <p>
        This final assignment has several important objectives.
        </p>

        <ul>
                <li style="margin-top:5pt">
                It gives you practice with reading official class documentation and <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/">APIs</a>.
                </li>
                <li style="margin-top:5pt">
                It gives you experience using stateful controllers to handle a complex, interactive application.
                </li>
                <li style="margin-top:5pt">
                It gives you experience with designing helper functions to structure your code properly.
                </li>
                <li style="margin-top:5pt">
                It gives you experience with using constants to make your code more readable.
                </li>
                <li style="margin-top:5pt">
                It gives you experience with programming animation and simple collisions.
                </li>
                <li style="margin-top:5pt">
                It gives you experience with an open-ended project that is not fully specified.
                </li>
                <li style="margin-top:5pt">
                It brings together everything you have learned in this class in one final assignment.
                </li>
        </ul>

        <hr>

        <a name="toc"></a>
        <h2>Table of Contents</h2>

        <ul>
                <li style="margin-top:3pt;"><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#started">Before You Get Started</a>
                </li>
                <li style="margin-top:3pt;">
                <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#started">Organization and Scope</a>
                </li>
                <li style="margin-top:3pt">
                <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#invaders">Alien Invaders</a>
                </li>
                <li style="margin-top:3pt">
                <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic">The Basic Game</a>
                </li>
                <ul>
                        <li style="margin-top:3pt">
                        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic-welcome">Create a Welcome Screen</a> (suggested deadline: 4/18)
                        </li>
                        <li style="margin-top:3pt">
                        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic-aliens">Create a Wave of Aliens</a> (suggested deadline: 4/19)
                        </li>
                        <li style="margin-top:3pt">
                        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic-ship">Create (and Animate) the Ship</a> (suggested deadline: 4/25)
                        </li>
                        <li style="margin-top:3pt">
                        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic-walk">Walk the Aliens Back-and-Forth</a> (suggested deadline: 4/26)
                        </li>
                        <li style="margin-top:3pt">
                        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic-bolts">Fire Bolts from the Ship</a> (suggested deadline: 4/29)
                        </li>
                        <li style="margin-top:3pt">
                        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic-retaliate">Fire Bolts from the Aliens</a> (suggested deadline: 5/1)
                        </li>
                        <li style="margin-top:3pt">
                        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic-collisions">Handle Bolt Collisions</a> (suggested deadline: 5/3)
                        </li>
                        <li style="margin-top:3pt">
                        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic-finish">Finish the Game</a> (suggested deadline: 5/5)
                        </li>
                </ul>
                <li style="margin-top:3pt">
                <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend">Extending the Game</a>
                </li>
                <li style="margin-top:3pt">
                <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#finishing">Completing the Assignment</a>
                </li>
        </ul>

        <hr>

        <a name="started"></a>
        <h2>Before You Get Started</h2>

        <a name="academic-integrity"></a>
        <h3>Academic Integrity</h3>
        <p>
                With the exception of your CMS-registered partner, we
                ask that you do not look at anyone else's code, seek
                solutions online or from students of past offerings of this course, or show your code to anyone else
                (except a CS1110 staff member) in any form whatsoever.
                This is in keeping with the
                the <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/policies/cs1110integrity.html">Academic
                Integrity Policy for CS 1110</a>. It is okay to post
                error messages on Piazza, but not code. If we need to
                see your code, we will do that in person.
        </p>

                <a name="partner"></a>
                <h3>Partner Policy</h3>

        <p>
                You may do this assignment with one other person. Form
                your group on CMS as soon as possible. This can only
                be done after the assignment is released on CMS, but
                it <b>must be completed before you submit the
                assignment. Both people must do something to form the
                group</b>. The first person proposes, and then the
                other accepts. CMS does not allow you to form groups
                once grades are released. Once you have grouped on
                CMS, only one person needs to submit the files.
        </p>

        <p>
                If you do this assignment with a partner, you must
                work together. It is against the rules for one person to
                do some programming on this assignment without the other
                person sitting nearby and helping. Furthermore, this
                assignment is not designed for you to split the work
                cleanly between partners.  Sit together and take turns
                "driving" (using the keyboard and mouse) and
                "navigating" (guiding the code that's being typed,
                spotting errors, keeping track of what's done and what's
                still on your todo list).
        </p>

        <hr width="50%">

        <a name="academic-copyright"></a>
        <h3>Copyrighted Material</h3>

        <p>
        There is another Academic Integrity issue with this assignment: copyrighted material.
        Gameplay cannot be copyrighted.  You can make a game that plays the same as another.
        Indeed, it was <em>Space Invaders</em> itself that lost the court case
        (against <em>Galaxian</em> and <em>Galaga</em>) that established this fact.  However,
        artwork in a game is copyrighted. So you should not attempt to use the original
        <em>Space Invaders</em> characters for your game.
        </p>

        <p>
        While there is maybe an argument for fair use, since this is a class project, your
        instructor prefers that you avoid the copyright issue entirely.  The <em>Space Invaders</em>
        are iconic.  While they may not appear in video games these days, they are still sold on
        T-shirts and appear in bad Adam Sandler movies. Furthermore, the current rights holder
        is a little company called Square Enix, which is not afraid of lawsuits.
        </p>

        <p>
        In general, you are only allowed to use copyrighted material if you have a license to
        do so.  For example, many of the songs and sound effects in the
        <a href="http://www.newgrounds.com/audio/">NewGrounds library</a>
        are available for you to use under an <i>Attribution License</i>.  That means you are
        free to use it so long as you cite the source in your documentation (e.g. your header
        comments).  This is okay.  A license where you have to pay is not okay.
        </p>

        <p>
        If you are in doubt as to whether you have a license to use something, ask us on Piazza.
        </p>

        <hr>

        <h3>Development Environment</h3>

        <p>
                To do this assignment, Python must be set up properly.  If
                you have not already done this, follow the
                <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/materials/python.html">installation
                instructions</a> to set it up on your computer.
                Alternatively, you can just work in the ACCEL lab.
        </p>

        <p>
                You should also create a folder on your hard drive that is
                dedicated to this assignment and this assignment
                only. Every time that you work on a new assignment, we
                want you to make a new folder, to keep things organized
                and avoid problems with naming collisions.  Make sure that
                the command shell and Atom Editor are both open in the
                current folder before you start.
        </p>

        <a name="started"></a>
        <h2>Organization and Scope</h2>

        <p>
        This is a long assignment, similar in length to <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a6/">Assignment 6</a>.
        Once again the trick is to <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#started-pacing">pace yourself</a>. This can
        be finished by the end of classes, if you work a little bit every day (excluding
        the Thanksgiving break).
        </p>

        <p>
        While there are no unit tests this time, you should be able to figure out if everything
        is working simply by playing the game. There are no tricky "restore everything to how
        it was" like with Turtles.  Just get the game working.
        </p>

        <a name="started-source"></a>
        <h3>Assignment Source Code</h3>

        <p>
		<strong>
		As you look at the A7 source code, it will be helpful to consult
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/">the A7 Application Program Interface (API)</a>
        for all of the classes that you will be using for this assignment.
        </strong>
        </p>

        <p>
        The first thing to do in this assignment is to download the zip file
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/code.zip">code.zip</a> from this link.  You should unzip it and <em>put the
        contents in a new directory</em>. As with the imager application, this assignment
        is organized a package with several files. In particular, this package file contains
        the following:
        </p>

        <dl>
        <dt><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/code/app.py"><code>app.py</code></a></dt>
        <dd>
        This file contains the <b>controller</b> class <code>Invaders</code>. This is the
        controller that launches the application.  It is one of three modules that you will
        modify for this assignment. While it is the primary controller class, you will
        note that it has no script code.  For that, you will use the module <code>__main__.py</code>
        below.
        </dd>
        <dt><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/code/wave.py"><code>wave.py</code></a></dt>
        <dd>
        This file contains the secondary <b>controller</b> class <code>Wave</code>.
        This class manages a single wave of aliens.  It works as a subcontroller,
        just like the example <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/schedule/code/22/subcontroller.py"><tt>subcontroller</tt></a>
        from class. It is another of the three modules that you will modify for this assignment,
        and the one that will require the most original code.
        </dd>
        <dt><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/code/models.py"><code>models.py</code></a></dt>
        <dd>
        This file contains the <b>model</b> classes <code>Ship</code>, <code>Alien</code> and
        <code>Bolt</code>.  If you want to add other model classes (e.g. power-ups), then
        you should add those here as well. This is the last of the three files you should modify
        for this assignment.
        </dd>
        <dt><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/code/consts.py"><code>consts.py</code></a></dt>
        <dd>
        This is a module filled with constants (global variables that should not ever change).
        It is used by <code>app.py</code>, <code>wave.py</code>, and <code>models.py</code>
        to ensure that these modules agree on certain important values. It also contains code for
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic-adjust">adjusting your alien count and speed</a>. You should only modify
        this file  if you are adding additional constants as part of your
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#expand-extensions">extended features</a>.
        </dd>
        <dt><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/code/__main__.py"><code>__main__.py</code></a></dt>
        <dd>
        This module contains the application code for this assignment.  It is the module you run
        from the command line to start the game.  It works the same way that the imager application
        did in  <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a6/">Assignment 6</a>.
        <i>Do not modify this file</i>!
        </dd>
        <dt><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/game2d.zip"><code>game2d</code></a></dt>
        <dd>
        This package contains the classes you will use to design you game.  Technically, this was
        already installed as part of Cornell Extensions.  However, we have made some important
        modifications for this assignment. <i>Under no circumstances should you ever modify this package</i>!
        </dd>
        <dt><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/Sounds.zip"><code>Sounds</code></a></dt>
        <dd>
        This folder is a list of sound effects that you may wish to use as part of your
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#expand-extensions">extensions</a>. You are also free to add more if you wish;
        just put them in this folder. All sounds must be WAV files.  While we have gotten MP3
        to work on Windows, Python support for OS X is unreliable.
        </dd>
        <dt><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/Fonts.zip"><code>Fonts</code></a></dt>
        <dd>
        This folder is a collection of True Type Fonts, should you get tired of the default Kivy
        font.  You can put whatever font you want in this folder, provided it is a .ttf file.
        Other Font formats (such as .ttc, .otf, or .dfont) are not supported.
        </dd>
        <dt><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/Images.zip"><code>Images</code></a></dt>
        <dd>
        This folder is a collection of images for the ship and aliens. The
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gimage.html"><code>GImage</code></a>
        and <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gsprite.html"><code>GSprite</code></a>
        classes allow you to include these in your game.  You may also want to include other images,
        such as a background; just remember to draw the background image <i>first</i>.
        </dd>
        </dl>

        <p>
        For the <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic">basic game</a>, you will only modify the first three files
        (maybe four) listed above. The class <code>Invaders</code> is a subclass of the class
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gameapp.html"><code>GameApp</code></a>.
        Your model classes should all be
        subclasses of <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gobject.html"><code>GObject</code></a>.
        As part of this
        assignment, you are expected to read the <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/index.html">online documentation</a>
        which describes how to use the basic classes.
        </p>

        <hr width="50%">

        <a name="started-running"></a>
        <h3>Running the Application</h3>

        <p>
        This application is very similar to <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a6/">Assignment 6</a> in that it
        is organized as a package.  To run the application, make sure all of the files are
        together in a folder and give the folder a name like <code>invaders</code>. To run the
        program, change the  directory in your command shell to just <i>outside of the folder
        <code>invaders</code></i> and type
        </p>

        <blockquote><code>
        python invaders
        </code></blockquote>

        <p>
        In this case, Python will run the <i>entire folder</i>.  What this really means is that
        it runs the script in <code>__main__.py</code>.  This script imports each of the other
        modules in this folder to create a complex application.
        </p>

        <hr width="50%">

        <a name="started-organization"></a>
        <h3>Assignment Organization</h3>

        <p>
        This assignment follows the model-view-controller pattern discussed in class. The modules
        are clearly organized so that each holds models, the view, or a controller.  The
        organization of these files is shown below. The arrows in this diagram mean "imports".
        So the <tt>Invaders</tt> controller imports the view and <tt>Wave</tt> subcontroller.
        The <tt>Wave</tt> controller imports the view and the models.  This leads to an important
        separation of files.  <tt>Invaders</tt> is never permitted to access anything in
        <tt>models.py</tt> and <tt>Wave</tt> is never permitted to access anything in
        <tt>app.py</tt>.  This is an important rule that we will enforce while grading.
        </p>

        <p>
        You will notice that the <tt>models</tt> module imports the view because it needs the parent
        class <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gobject.html"><code>GObject</code></a> to perform any drawing. In
        practice, we often like to separate the model and view to cut down on the number of
        arrows (less meetings between the various programmers).  However, that would make this
        assignment a lot harder.  Fortunately, the view does not import anything (and should
        not be modified).  This means there are no cycles in this architecture
        (e.g. A imports B imports C imports A).  Cyclical imports are very dangerous and you
        have to be careful with them in large applications. Avoiding cycles is one of the
        reasons we draw pictures like the one below.
        </p>


        <p align="center">
        <img width="300" height="254" align="middle" src="./Assignment 7 CS 1110_files/mvc.png" alt="mvc">
        </p>

        <p>
        In addition to the four main modules, there is another module with no class or function
        definitions.  It only has constants, which are global variables that do not change.  This
        is imported by the <tt>models</tt> module and the two controllers; it is a way to help them share
        information.
        </p>

        <hr width="50%">

        <a name="started-scope"></a>
        <h3>Assignment Scope</h3>

        <p>
        As we explained in class, your game is a subclass of <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gameapp.html">GameApp</a>.
        The parent class does a lot of work for you.  You just need to implement three main methods.
        They are as follows:
        </p>

        <table id="internal" align="center">
        <thead>
        <tr>
                <th width="20%">Method</th>
        <th width="80%">Description</th>
        </tr>
        </thead>
        <tbody>
        <tr>
                <td><code>start()</code></td>
                <td>
                Initializes the game state and attributes. Because of how Kivy works, initialization
                code should go here and not in the constructor (which is called <i>before</i> the
                window is sized properly).
                </td>
        </tr>
        <tr>
                <td><code>update(dt)</code></td>
                <td>
                Updates the models for the next animation frame. The speed at which this is called is
                determined by the (immutable) attribute <code>fps</code>, which is set by the
                constructor.  The parameter <code>dt</code> is time in seconds since the last call to
                <code>update</code>.
                </td>
        </tr>
        <tr>
                <td><code>draw()</code></td>
                <td>
                Draws all of the models to the screen.  This is called when <tt>update</tt> is
                complete. Implementing this method should be as simple as calling the method
                <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gobject.html#game2d.GObject.draw"><code>draw</code></a> inherited from
                <code>GObject</code>.
                </td>
        </tr>
        </tbody>
        </table>

        <a name="40-line"></a>
        <p>
        Obviously, you are not going to put all of your code in those three methods. The result
        would be an unreadable mess. An important part of this assignment is developing new
        methods whenever you need them so that each method is small and manageable. Your grade
        will depend partly on the design of your program. As one guideline, <b>points will be
        deducted for methods that are more than 30 lines long (not including specifications)</b>.
        </p>

        <p>
        You will also need to add methods and attributes to the class <code>Wave</code>
        in <code>wave.py</code>, as well as <code>Ship</code>, <code>Alien</code>, and
        <code>Bolt</code> in <code>models.py</code>. These classes are completely empty,
        though we have given you <i>a lot</i> of hints in the class specification.  You
        should read all these specifications.
        </p>

        <p>
        As you write the assignment, you may find that you need additional attributes. Whenever
        you add a new attribute to a class, you must fully state the invariant in your
        specification. All instance attributes should be hidden. While you do not need to
        enforce the invariants in the getters and setters, you must must have them if the
        attributes are accessed by another class.  For example, if the <tt>Wave</tt> class needs
        to check the direction of a laser bolt, then you are going to need a getter for the
        velocity in the <tt>Bolt</tt> class.
        </p>

        <p>
        When approaching this assignment, you should always be thinking about "what code goes
        where?" If you do not know what file to put things in, please ask on Piazza (but do not
        post code). In general, you should follow these guidelines:
        </p>

        <h4>Invaders</h4>

        <p>
        This controller does very little.  All it does is keep track of the game state
        (e.g. whether or not the game is paused).  Most of the time it just calls the methods
        of <tt>Wave</tt>, and <tt>Wave</tt> does all the work.  However, if you need anything
        between games, like a paused message or a high score, this goes here.
        </p>

        <h4>Wave</h4>

        <p>
        This class does all the hard work.  In addition to the initializer, it needs its own
        <tt>update</tt> and <tt>draw</tt> methods.  This is a subcontroller, and you should
        use the <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/schedule/code/22/subcontroller.py">subcontroller</a> example from class as
        a template.
        </p>

        <p>
        The most complex method will be the <tt>update</tt> and you will certainly violate the
        30-line rule if you do not break it up into headers.  For the basic game, this method
        will need to do the follow:
        </p>

        <ul>
                <li style="margin-top:5pt">
                Move the ship according to player input
                </li>
                <li style="margin-top:5pt">
                March the aliens across the screen
                </li>
                <li style="margin-top:5pt">
                Fire a laser bolt from either the ship or an alien
                </li>
                <li style="margin-top:5pt">
                Move any laser bolts across the screen
                </li>
                <li style="margin-top:5pt">
                Resolve any collisions with a laser bolt
                </li>
        </ul>

        <p>
        In our code, each one of these is a separate helper.  You should think about doing this
        in your code as well.
        </p>

        <h4>The Models</h4>

        <p>
        The models just keep track of data.  Most of the time, models just have attributes, with
        getters and setters.  Think <tt>Image</tt> and <tt>ImageHistory</tt> from the previous
        assignment.  However, sometimes models have additional methods that perform complex
        computation on the data, like <tt>increment</tt> or <tt>undo</tt> in
        class <tt>ImageHistory</tt>.
        </p>

        <p>
        The models in this assignment are the game objects on screen: the ship, any aliens, and
        any laser bolts.  Of these three, it is more important to have a class for <tt>Bolt</tt>.
        <tt>Bolt</tt> needs an additional attribute for its velocity, and you need some extra
        methods to perform calculations with this velocity.
        </p>

        <p>
        The classes <code>Ship</code> and <code>Alien</code> are subclasses of
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/api/gimage.html"><code>GImage</code></a>.  You should not need any
        new attributes for these two classes.  However, you will want to write a
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic-collisions"><code>collides</code></a> method in each of these classes
        to detect collisions with a laser bolt.
        </p>

        <p>
        If your added features include scoring, you will probably need extra attributes in
        the <code>Alien</code> class to track point value.  If you add boss aliens or motherships,
        then you may need additional model classes to display and track them. If in doubt about
        whether or not you need a new class, ask us on Piazza.
        </p>

        <hr width="50%">

        <a name="started-pacing"></a>
        <h3>Pacing Yourself</h3>

        <p>
        You should start as soon as possible. If you wait until the day before this assignment
        is due, you will have a hard time completing it. If you work on a little bit of it every
        day or every other day, then you will enjoy it and get it done on time.
        </p>

        <p>
        The hard part of this assignment may be "finishing up": designing the final reorganization
        in order to incorporate lives in your game. We have budgeted you one day for this, but
        you have up to three days if you decide just to do the bare minimum and not add any
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend">extensions</a>.
        </p>

        <p>
        You should implement the application in stages, as described in these instructions. Do
        not try to get everything working all at once. Make sure that each stage is working before
        moving on to the next stage.
        </p>

        <p>
        Set up a schedule. We have suggested some milestones, but make up your own schedule.
        Leave time for learning things and asking questions. Above all, do not try to
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend">extend the program</a> until you get the
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#basic">basic functionality working</a>. If you add extensions too early,
        debugging may get very difficult.
        </p>

        <hr width="50%">

        <a name="started-help"></a>
        <h3>Getting Help</h3>

        <p>
        We have tried to give you as much guidance in this document as we can.  However, if you
        are still lost, please see someone immediately.  Like the last few assignments, this is
        a fairly involved project, and you should get started early. To get help, you may talk
        to the course instructor, a TA, or a consultant. See the
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/staff/">staff page</a> for more information.
        </p>

        <p>
        In addition, you should always check <a href="http://www.piazza.com/cornell/spring2019/cs1110">Piazza</a>
        for student questions as the assignment progresses. We may also periodically post announcements
        regarding this assignment on Piazza and the course website.
        </p>

        <hr>

        <a name="invaders"></a>
        <h2>Alien Invaders</h2>

        <p>
        The initial configuration of the Alien Invaders is shown in the picture below.
        There are aliens arrange in rows and columns on the left side of the screen.  At the
        bottom of the screen is the player's ship.  There is also a horizontal line at the bottom
        of the screen.  This is the <em>defense line</em>.  If the aliens make it past this line,
        they have successfully invaded and you have lost the game.
        </p>

        <p align="center">
        <img src="./Assignment 7 CS 1110_files/invaders1.png" alt="" width="525" height="375" align="middle"><br>
        <b style="font-size:110%;">Starting Position</b>
        </p>

        <p>
        Once the game begins, the aliens march back and forth across the screen. In the beginning
        they march to the right, moving <tt>ALIEN_H_WALK</tt> (a variable in <code>consts.py</code>)
        pixels at a time. When they reach the right hand side of the screen they
        move down <tt>ALIEN_V_WALK</tt> pixels, and then start marching to the left.  They continue this
        pattern back and forth, dropping down one step whenever they reach the edge of the screen,
        until they are all destroyed or make it past the defense line. An illustration of the aliens
        breaking the defense line is shown below.
        </p>

        <p align="center">
        <img src="./Assignment 7 CS 1110_files/invaders3.png" alt="" width="525" height="375" align="middle"><br>
        <b style="font-size:110%;">Breaching the Defense</b>
        </p>

        <p>
        To protect against the invaders, the player can move the ship left and right, and fire
        laser bolts.  A laser bolt starts from the tip of the ship and moves up in a straight
        line.  If the bolt collides with an alien, that alien is destroyed, as shown below.
        </p>

        <p align="center">
        <img src="./Assignment 7 CS 1110_files/invaders5.png" alt="" width="525" height="375" align="middle"><br>
        <b style="font-size:110%;">Alien Destroyed</b>
        </p>

        <p>
        The aliens are not defenseless.  Every time the aliens take step, there is a random
        chance that one of the aliens will fire a laser bolt back. That laser bolt will always
        come from the bottom alien in a column chosen at random.  If a laser bolt from an alien
        collides with the ship, the ship is destroyed. This is shown below.
        </p>

        <p align="center">
        <img src="./Assignment 7 CS 1110_files/invaders4.png" alt="" width="525" height="375" align="middle"><br>
        <b style="font-size:110%;">Ship Destroyed</b>
        </p>

        <p>
        A player has up to three lives, where one life is lost each time a ship is destroyed.  If the
        player has any lives remaining when the ship is destroyed, the game will briefly pause
        before starting again.  The wave continues until one of three things happens:
        </p>

        <ol>
        <li style="margin-top:5pt;">
        The last alien is destroyed.
        </li>
        <li style="margin-top:5pt;">
        The ship is destroyed and there are no lives remaining.
        </li>
        <li style="margin-top:5pt;">
        Any alien touches the defensive line.
        </li>
        </ol>

        <p>
        In case 1, the player wins the game.  In the other two, the player loses.  The video
        below shows the basic game, with no <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend">extensions</a>.
        </p>

        <table align="center"><tbody><tr><td>
        <div style="left:50%; width:532; border: solid 0 #060; border-left-width:2px; border-right-width:2px; border-top-width:2px; border-bottom-width:2px; padding-left:0.5ex">
        <video width="532" height="480" controls="controls">
        <source src="http://cs1110.cs.cornell.edu/video/AlienLow.mp4" type="video/mp4">
        Your browser does not support the video tag.
        </video>
        </div>
        </td></tr></tbody></table>
        <br>

        <hr width="50%">

        <a name="breakout-state"></a>
        <h3>Game State</h3>

        <p>
        One of the challenges with making an application like this is keeping track of the
        <i>game state</i>.  In the description above, we can identity several distinct phases
        of the game:
        </p>

        <ul>
        <li style="margin-top:3pt">
        Before the game starts, and the alien wave has not started
        </li>
        <li style="margin-top:3pt">
        When the aliens are set up, but have not started to move
        </li>
        <li style="margin-top:3pt">
        While the game is ongoing, and the aliens are on the march
        </li>
        <li style="margin-top:3pt">
        While the game is paused (e.g. to show a message)
        </li>
        <li style="margin-top:3pt">
        While the game is creating a new ship to replace the old one
        </li>
        <li style="margin-top:3pt">
        After the game is over
        </li>
        </ul>

        <p>
        Keeping these phases straight is an important part of implementing the game. You need
        this information to implement <code>update</code> in <tt>Invaders</tt> correctly.
        For example, whenever the game is ongoing, the method <code>update</code> should instruct
        the <tt>Wave</tt> object to move the ship.  However, if the game has just started, there
        is no <tt>Wave</tt> object yet, and the method <code>update</code> should create one.
        </p>

        <p>
        For your convenience, we have provided you with constants for six states:
        </p>

        <ul>
        <li style="margin-top:3pt">
        <code>STATE_INACTIVE</code>, before a a wave has started
        </li>
        <li style="margin-top:3pt">
        <code>STATE_NEWWAVE</code>, when it is time to create a new wave of aliens
        </li>
        <li style="margin-top:3pt">
        <code>STATE_ACTIVE</code>, when the game is ongoing and the aliens are marching
        </li>
        <li style="margin-top:3pt">
        <code>STATE_PAUSED</code>, when the game is paused to display a message
        </li>
        <li style="margin-top:3pt">
        <code>STATE_CONTINUE</code>, when the player is waiting for a new ship
        </li>
        <li style="margin-top:3pt">
        <code>STATE_COMPLETE</code>, when the game is over
        </li>
        </ul>

        <p>
        All of these constants are available in <code>consts.py</code>. The current application
        state should be stored in the attribute <code>_state</code> inside <tt>Invaders</tt>.
        You are free to add more states when you work on your game <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend">extensions</a>.
        However, your basic game should stick to these six states.
        </p>

        <p>
        The rules for changing between these six states are outlined in the specification
        of method <code>update</code> in <code>Invaders</code>.  You should read that in
        its entirety.  However, we will cover these rules in the instructions below as well.
        </p>

        <hr>

        <a name="basic"></a>
        <h2>The Basic Game</h2>

        <p>
        We have divided these instructions into two parts. The first part covers the basic things
        that you must implement just to get the game running. Once you do that, the assignment
        gets more interesting.  You should try to finish everything in this part of the assignment
        by <b>Sunday, May 5</b>. If you do that, you will
        be in good shape to <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend">add extensions</a>.
        </p>

        <p>
        You should focus most of your effort on the basic game. Without any extensions at all,
        you can get 92/100 on this assignment.  The extensions are the last eight points.
        However, particularly good extensions will count as extra credit, giving you even more
        points on the assignment.   However, except in extreme cases, you cannot earn more than
        a 100.
        </p>

        <hr width="50%">

        <a name="basic-constants"></a>
        <h3>Before You Do Anything</h3>

        <p>
        The very first thing that you should do is read the file <code>consts.py</code>. If you
        ever need a value like the size of the ship, the size of the game window, or so on, this
        is where you go.  When writing code, you should always use the constants, not raw numbers
        (or "magic numbers," as we call them).  Magic numbers make your code hard to debug, and
        if you make a change (e.g. to make the ship bigger), you have no idea about all of the
        locations in your code that need to be changed.
        </p>

        <p>
        With that said, you are welcome to change any of these numbers if you wish.  You
        are also encouraged to add more constants if you think of other numeric values
        that you need.  Anytime that you find yourself putting a number in your code, ask
        yourself whether or not it would make sense as a constant.
        </p>

        <hr width="50%">

        <a name="basic-welcome"></a>
        <h3>Create a Welcome Screen</h3>

        <p>
        We start with a simple warm-up to get you used to defining state and drawing graphics
        elements. When the player starts the application, they should be greeted by a welcome
        screen. When you work on your <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend">extensions</a>, you can embellish your
        welcome screen to be as fancy as you wish.  But for now, keep it simple.
        Your initial welcome screen is a simple text message.
        </p>

        <p align="center">
        <img src="./Assignment 7 CS 1110_files/welcome.png" alt="" width="470" height="75">
        </p>

        <p>
        Because the welcome message is before any game has started, it belongs in the
        <tt>Invaders</tt> class, not the <tt>Wave</tt> class.  You are already seeing
        how we separate what goes where.
        </p>

        <p>
        The text message will look something like the one above. It does not need to say
        "Press 'S' to play". It could say something else, as long as it is clear that the user
        press a key on the keyboard to continue. However, we recommend against allowing the
        user to press <em>any</em> key, since in later steps that will make it easy for the
        user to accidentally miss an important message.
        </p>

        <p>
        To create a text message, you need to create a
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/glabel.html"><code>GLabel</code></a> and store in it an attribute. If
        you read the specification for class <code>Invaders</code>, you will see an attribute
        named <code>_text</code>.  This is for any messages to display to the player.
        If you wish you may rename this attribute, as long as you make it clear in the
        class specification.
        </p>

        <p>
        Since the welcome message should appear as soon as you start the game, it should
        be created in the method  <code>start</code>, the first important method of the class
        <code>Invaders</code>. When creating your message, you will want to set things like the
        font size and position of the text. As you can see from the documentation for
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/glabel.html"><code>GLabel</code></a> and
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gobject.html"><code>GObject</code></a>, graphics objects have a lot of
        attributes to specify things such as position, size, color, font style, and so on.
        </p>

        <p>
        You should experiment with these attributes to get the welcome screen that you want.
        The key thing to remember is that -- in Kivy -- screen coordinates start from the
        bottom-left corner of the window (and not the top right as with most graphics
        applications). Note that <code>x</code> and <code>y</code> are the <em>center</em> of
        the label.  If you want to place the left edge, use the attribute <code>left</code>
        instead of <code>x</code>.
        </p>

        <p>
        Simply adding this code to <code>start</code> is not enough.  If you were to run the
        application right now, all you would see is a blank white window. You have to tell Python
        what to draw. To do this, simply add the line
        </p>

        <pre class="hljs">self._text.draw(self.view)</pre>

        <p>
        to the method <code>draw</code> in <code>Invaders</code>.  The (non-hidden) attribute
        <code>view</code> is a reference to the window. Hence this method call instructs Python
        to draw this text label in the window. This attribute has an "invisible" getter
        like the attributes un <code>RGB</code>. Now run the application and check if you see your
        welcome message.
        </p>

        <h4>Initializing Game State</h4>

        <p>
        The other thing that you have to do in the beginning is initialize the game state.
        The attribute <code>_state</code> (included in the class specification) should start
        out as <code>STATE_INACTIVE</code>.  That way we know that the game is not ongoing,
        and the program should (not yet) be attempting to animate anything on the screen.
        In addition, the other attributes listed (particularly <code>_wave</code>) should 
        be <code>None</code>; we have not done anything yet!
        </p>

        <p>
        The <code>_state</code> attribute is an important part of many of the invariants in
        this game. In particular, we want your new attribute for the welcome message to
        have the following invariant:
        </p>

        <ul>
                <li style="margin-top:3pt">
                If the state is <code>STATE_INACTIVE</code>, then there is a welcome message
                </li>
                <li style="margin-top:3pt">
                If the state is not <code>STATE_INACTIVE</code>, the welcome message is <code>None</code>.
                </li>
        </ul>

        <p>
        Does your definition of <code>start</code> satisfy this invariant?
        </p>

        <h4>Dismissing the Welcome Screen</h4>

        <p>
        The welcome screen should not show up forever.  The player should be able to dismiss the
        welcome screen (and start a new game) when he or she presses a key. To respond to keyboard
        events, you will need the attribute <code>input</code>, which is an instance of
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/ginput.html"><code>GInput</code></a>. This class has several methods for
        identifying what keys are currently pressed.
        </p>

        <p>
        When using the attribute <tt>input</tt>, remember the issues that we discussed in class.
        The method <tt>update</tt> is called every 16 millisecond.  If you hold a key down,
        then you see a lot of key presses.  You just want the first press!  That means you need
        some way to determine whether or not the key was pressed this animation frame and not
        in the previous one.  See the <code><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/schedule/code/22/state.py">state.py</a></code> demo from
        class on how to do this.  This may require you to add a new attribute to <code>Invaders</code>.
        </p>

        <p>
        If you detect a key press, then you should change the state <code>STATE_INACTIVE</code>
        to <code>STATE_NEWWAVE</code>. This will start a new game. You are not ready to actually
        write the code to start the game, but switching states is an important first activity.
        </p>

        <p>
        Invariants must be satisfied at the end of every method, so you need to assign <code>None</code>
        to the welcome message as well. This will require a simple change to method
        <code>draw</code> to keep it from crashing.  Once you have done that, run the
        application.  Does the message disappear when you press a key?
        </p>

        <h4>Important Considerations</h4>

        <p>
        This first part of the assignment looks relatively straightforward, but it gets you
        used to having to deal with controller state.  In this part, you likely had to add
        attributes beyond the ones that we have provided.  Whenever you a new attribute, you
        must add it and its corresponding invariant to the class specification. Add it just
        after the comment stating "<code>ADD MORE ATTRIBUTES</code>", to make it easier for
        the graders (and you) to find them. We will deduct style points for instance attributes
        that are not specified.
        </p>

        <p>
        <b>Try to finish this part by Thursday, April 18</b> (e.g. the day after starting the
        assignment). You will spend most of your time reading the
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/index.html">online documentation</a>,
        but this will give you a solid understanding of how this application works.
        </p>

        <hr width="50%">

        <a name="basic-aliens"></a>
        <h3>Create a Wave of Aliens</h3>

        <p>
        The state <code>STATE_NEWWAVE</code> is only supposed to last <em>one animation frame</em>.
        When you are in this state, you should construct a new <code>Wave</code> object and
        assign it to the attribute <code>_wave</code>. During the next animation frame, you should
        switch to the state <code>STATE_ACTIVE</code>. Do not worry about this second state;
        you will deal with it in the next task.
        </p>

        <p>
        Right now, the constructor subcontroller <code>Wave</code> does not do anything. That is
        because you have not written an initializer yet.  Eventually, your initializer is going
        to create the aliens and the ship.  Right now, we are just going to focus on the aliens.
        </p>

        <h4>Creating a Single Alien</h4>

        <p>
        While you have not yet completed the definition of class <code>Alien</code> yet, we
        have gotten you started in the module <code>models.py</code>.  In particular, the
        class <code>Alien</code> is a subclass of <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gimage.html"><code>GImage</code></a>.
        That means it inherits all of its attributes and methods, including the initializer.
        Hence (unless you override methods to do otherwise), you create and draw aliens
        the same way you create and draw a <code>GImage</code> object.
        </p>

        <p>
        To define an image, use the attributes <code>x</code>, <code>y</code>, <code>width</code>,
        <code>height</code>, and <code>source</code> to specify how it looks on screen. The first
        four attributes are just like <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/glabel.html"><code>GLabel</code></a>, while
        <code>source</code> specifies an image file in the <b>Images</b> folder. As with the label,
        you can either assign the attributes after the object is created or assign them in the
        constructor using keywords.  Keyword arguments work like default arguments in that
        you write <tt>param = value</tt>.  See the <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/index.html">online documentation</a>
        for an example of how to approach this.
        </p>

        <p></p>

        <h4>Creating a Wave of Aliens</h4>

        <p>
        Read the specification for <code>Wave</code>.  You will see that it contains a
        two-dimensional list of <code>Alien</code> objects.  Your method <code>__init__</code>
        should fill this 2d list with aliens.  Because there are <em>other</em> things
        you will need to do in <code>__init__</code>, you should probably make a helper method
        that does this initialization.  Otherwise, <code>__init__</code> may go over 30 lines
        when you add extra feature later.
        </p>

        <p>
        Look at the constants in <code>consts.py</code>.  You need to draw <code>ALIEN_ROWS</code>
        rows of aliens with <code>ALIENS_IN_ROW</code> many aliens in each row.  The module also
        includes constants for how big to make the aliens and how much space to put between them.
        </p>

        <p align="center">
        <img src="./Assignment 7 CS 1110_files/alien-wave.png" alt="" width="600" height="400" vspace="0" align="middle">
        </p>

        <p>
        When you are ready, you should set up the aliens as shown above. Each row of aliens
        will be a list of <code>Alien</code> objects, and each row is an element of the attribute
        <tt>_aliens</tt>. You can store the rows bottom-up or top-down; it does not matter.  The
        alien positions should line up neatly into rows and columns. The <em>left</em> edge of
        the wave should be <tt>ALIEN_H_SEP</tt> from the left edge of the window, and the
        <em>top</em> edge of the wave should be <tt>ALIEN_CEILING</tt> from the top of the window.
        </p>

        <p>
        You should be able to code this as a straightforward nested loop, like those that you
        worked with in  <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a6/">Assignment 6</a>.  There are only three things
        to keep track of in the loop:
        </p>

        <ul>
                <li style="margin-top:5pt;">The <tt>x</tt> position of the next alien</li>
                <li style="margin-top:5pt;">The <tt>y</tt> position of the next alien</li>
                <li style="margin-top:5pt;">The image of the next alien</li>
        </ul>

        <p>
        All other values are defined by constants.
        To compute the first two, remember that the aliens should be <code>ALIEN_H_SEP</code>
        and <code>ALIEN_V_SEP</code> apart from each other.  For the images, however, you
        should do something different.  All aliens in a row should use the same image and the
        image should be constant for two rows.  Images should go from bottom to top.  So if there
        are five rows, that is two rows of <tt>alien1.png</tt>, another two rows of
        <tt>alien2.png</tt>, and just one row of <tt>alien3.png</tt>.
        </p>

        <p>
        We have only provided you with three alien images.  However, in the <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#extend">extensions</a>
        you are free to add more.  Regardless, you should be prepared to draw <b>any</b> number
        of rows of aliens.  So when you run out of aliens, you need to loop back to the beginning.
        For example, suppose you had four alien images but needed nine rows of aliens.  You would
        have two rows of <tt>alien1.png</tt>, <tt>alien2.png</tt>, <tt>alien3.png</tt>, and
        <tt>alien4.png</tt>, in that order.  Then you would have one last row of <tt>alien1.png</tt>
        at the top.  See the example below for three images and nine rows.  You will find the
        constant <code>ALIEN_IMAGES</code> helpful here.
        </p>

        <p align="center">
        <img src="./Assignment 7 CS 1110_files/aliens-nine.png" alt="" width="525" height="387" vspace="0" align="middle">
        </p>

        <a name="#basic-aliens-draw"></a>
        <h4>Drawing Aliens</h4>

        <p>
        Once again, creating <code>Alien</code> objects is not enough to draw them on the screen.
        But drawing them is a bit more complicated than drawing the welcome message.  The aliens
        are (hidden) attributes in <code>Wave</code>.  Writing
        </p>

        <pre class="hljs py"><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> self._wave._aliens:
<span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> row:
alien.draw(self.view)
        </pre>

        <p>
        <em>works</em>, but it is not allowed. <b>We will take off style points if a class of
        one module ever accesses  the hidden attributes of an object of a class in a different
        module.</b>
        </p>

        <p>
        This is the purpose of adding a <tt>draw</tt> method to class <tt>Wave</tt>. The
        <tt>draw</tt> method in <tt>Invaders</tt> calls the <tt>draw</tt> method in <tt>Wave</tt>,
        which calls the <tt>draw</tt> method for each alien (defined in
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gobject.html"><code>GObject</code></a>).
        </p>

        <p>
        However, only <code>Invaders</code> has access to the attribute <code>view</code>, which
        is necessary for drawing.  The class <code>Wave</code> cannot <em>directly</em> access
        any attributes in <code>Invaders</code>.  If a method in <code>Wave</code> needs an
        attribute from <code>Invaders</code>, then <code>Invaders</code> must provide that
        attribute as an argument in the method call.  This means that the <tt>draw</tt> method
        in <code>Wave</code> needs to have <code>view</code> as a parameter, just like the
        <code>draw</code> method in <code>GObject</code>.
        </p>

        <a name="basic-adjust"></a>
        <h4>Testing Your Code</h4>

        <p>
        When you are testing the later parts of this assignment, you should play with just 3-4
        aliens per row and 1-2 rows of aliens. This will save time and let you quickly see whether
        you can successfully win or lose. If you play with the default number of aliens (5 rows
        and 12 aliens per row), then each game will take a while to test.
        </p>

        <p>
        You might assume that testing in this manner requires you to change the values of the
        global constants that give the number of rows and number of aliens in a row. This is also
        undesirable, a you might forget to change them back. Instead, we have added some clever
        code in <code>consts.py</code> that allows you to change these constants when you start
        the application.
        </p>

        <p>
        When you run your application (again, assuming that it is in a folder called
        <code>invaders</code>) try the command
        </p>

        <blockquote><code>
        python invaders 2 3
        </code></blockquote>

        <p>
        When you do this, Python changes the value of <code>ALIEN_ROWS</code> to 2 and the value
        of <code>ALIENS_IN_ROW</code> to 2.
        </p>

        <p>
        You should make sure that your creation of the rows of aliens works with any number of
        rows and any number of aliens in each row (e.g. 1, 2, ..., 5, and perhaps more). This
        is one of the things we will be testing when we run your program.  Technically, the
        player should lose if the number of aliens causes them to drop below the defense line,
        but you can ignore that issue in this step.
        </p>

        <p>
        <b>Try to finish this part by Friday, April 19</b>. All you need to do is to produce
        the alien diagram shown above (after the welcome screen). Once you have done this, you
        should be an expert with graphics objects.  This will give you considerable confidence
        that you can get the rest done.
        </p>

        <hr width="50%">

        <a name="basic-ship"></a>
        <h3>Create (and Animate) the Ship</h3>

        <p>
        Next you need to create the player ship.  Again, this is to be stored in an attribute
        of class <code>_wave</code>. That means that you must create it in the <code>__init__</code>
        method of <code>Wave</code> and modify your drawing code so that it appears. The ship
        should be an object of class <code>Ship</code>, which is once again a subclass of
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gimage.html"><code>GImage</code></a>.
        </p>

        <h4>Creating the Ship</h4>

        <p>
        The ship dimensions an position are fully specified by constants in <code>consts.py</code>.
        The ship should be centered horizontally and the bottom should be <code>SHIP_BOTTOM</code>
        from the bottom of the window.  You are free to change these constants as you wish,
        but use them when making the ship.
        </p>

        <h4>Creating the Defense Line</h4>

        <p>
        The defense line is the line above the ship that it is defending from the aliens.  It is
        <tt>DEFENSE_LINE</tt> pixels above the bottom of the window.  You should create and draw
        this line.  A line is represented by a <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gpath"><code>GPath</code></a> object.
        </p>

        <p>
        The primary attributes for <code>GPath</code> are <tt>points</tt> and <tt>linewidth</tt>.
        The <tt>linewidth</tt> is the width of the line.  Make it larger than 1 for a thicker
        line.  The attribute <tt>points</tt> is an even-length list of numbers defining the line segment.
        So if you want the line segment from (0,10) to (20,30), the <tt>points</tt> attribute
        would be [0,10,20,30].
        </p>

        <h4>Animating the Ship</h4>

        <p>
        To animate the ship, you will need to take into account the player's key presses. The
        ship only moves when the player presses (or holds down) a key to make it move. By
        default, we assume that the player will use the left and right arrow keys to move the
        ship.  However, if you prefer WASD controls or some other control scheme, that is okay.
        </p>

        <p>
        To see how to control the ship, you should look at the
        <code><a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/schedule/code/22/arrows.py">arrows.py</a></code> sample from class. This example shows how to
        check if the arrow keys are presse, and how to use that to animate a shape. Note
        that this is actually <em>easier</em> than dismissing the welcome message.  We do not
        care if a key press is the first one. The ship will continue to move so long as
        we hold down a key.
        </p>

        <p>
        The ship movement takes place every animation frame.  That is why you want to put it
        the <tt>update</tt> method of <code>Wave</code>.  Remember that this method must be
        <i>called</i> within the <tt>update</tt> method of <tt>Invaders</tt>, or nothing will
        happen.  Again, see the <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/schedule/code/22/subcontroller.py">subcontroller</a> example
        from class to understand what we are asking for.
        </p>

        <p>
        To check the keyboard, the method <tt>update</tt> in <tt>Wave</tt> will need to access
        the <tt>input</tt> attribute <code>Invaders</code>, which is an instance of
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/ginput.html"><tt>GInput</tt></a>. Again, since <tt>Wave</tt> is
        not allowed to access any of the attributes of <tt>Invaders</tt>, that means you need
        to pass <tt>input</tt> as an argument in this method call.
        </p>

        <p>
        In the basic game, the ship should only move left or right, not up and down.  Add to
        the <code>x</code> attribute to get it to move right, and subtract from it to move it
        left.  The amount you add or subtract is up to you, though we have provided the
        constant <tt>SHIP_MOVEMENT</tt> as a suggestion.  If the value is too small, then the
        ship will be slow and sluggish.  If the value is too large, then the ship will zip across
        the screen and be hard to control.
        </p>

        <h4>Important Considerations</h4>

        <p>
        You should ensure that the ship stays completely on the board even if the player
        continues to hold down a key. If you do not do this, the ship is going to be completely
        lost once it goes off screen. Our code for this extra feature is 3 lines long; it uses
        the functions <code>min</code> and <code>max</code>.
        </p>

        <p>
        Your implementation should only allow the ship to be moved when the state is active.
        This means that <tt>update</tt> in <tt>Invaders</tt> is starting to get more complicatd.
        At this point you might want to start thinking about helper methods to organize your
        code better.  Look at the <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/schedule/code/22/state.py">state.py</a> demo from lecture for
        ideas on how to organize your code.  In particular, you want a method to determine
        the current state, and then helpers for each of the states.
        </p>

        <p>
        <b>Draw the ship and get it move by Thursday, April 25</b>.  This is a really
        straightforward challenge if you understand the <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/schedule/code/22/arrows.py">arrows</a>
        demo. Given all the work you have done so far, you should be able to complete this in
        two hours or so.
        </p>

        <hr width="50%">

        <a name="basic-walk"></a>
        <h3>Walk the Aliens Back-and-Forth</h3>

        <p>
        Now that the set-up is complete, it is time to start invading.  To invade, the aliens
        have to march back and forth across the screen.  Fortunately, you have already gotten
        the ship moving, so you know how to move things. The aliens are similar, with just a
        few important differences.
        </p>

        <h4>Moving the Aliens to the Right</h4>

        <p>
        When aliens move, they always move the same amount: <code>ALIEN_H_WALK</code>.  To move
        the aliens to the right, simply add this value to the <tt>x</tt> position of each alien.
        However, aliens have one important feature that makes them different from the ship.
        <em>They do not move every animation frame</em>
        </p>

        <p>
        You will notice that <code>consts.py</code> has an attribute called <code>ALIEN_SPEED</code>.
        This is how fast the aliens walk.  If the value is 1.0, they make a step every full second.
        If it is 0.5, they move every half of a second.  The smaller this number is, the faster
        they move (increasing the difficulty).
        </p>

        <p>
        This means that you have to keep track of how long it has been between steps before you
        move the aliens again.  How do you do that?  In the specification of <code>Wave</code>,
        you will see an attribute called <code>_time</code>.  This counts the number of seconds
        since the last alien step.  At the start, and each time the aliens move, it is reset to
        0.  Otherwise, you add the number of seconds that have passed to <code>_time</code>,
        and you do not move the aliens. When this value is bigger than <code>ALIEN_SPEED</code>,
        you move the aliens again.
        </p>

        <p>
        So your next question should be how to count the numbers of seconds that have passed.
        You will notice that <tt>update</tt> in <code>Invaders</code> has an attribute called
        <tt>dt</tt>.  This counts the number of seconds that have passed since the last animation
        frame (at 60 frames as second, it is somewhere around 0.017 each time).  This is the
        value that you should be summing and adding to the attribute <code>_time</code> in
        <code>Wave</code>.  You can do this via a setter or by passing <tt>dt</tt> as an
        argument to the <tt>update</tt> method in <tt>Wave</tt>.
        </p>

        <p>
        As you work on this code, you will discover that the <tt>update</tt> method in <tt>Wave</tt>
        is starting to get very long.  It is time to start thinking about breaking this method
        into helpers.
        </p>

        <h4>Moving the Aliens Back</h4>

        <p>
        Right now, your aliens will march all the way off the screen.  You do not want that.
        When the wave of aliens reaches the right edge of the screen, you want to move the
        aliens down by <code>ALIEN_V_WALK</code>.  Then you need to start walking them back
        to the left.
        </p>

        <p>
        This means that at each step, you need to find the rightmost alien in the wave.  Check
        if its right edge is closer than <code>ALIEN_H_SEP</code> to the right edge of the window.
        If so, move all the aliens all down by <code>ALIEN_V_SEP</code>.  You should also move them
        back to the left so that there is <code>ALIEN_H_SEP</code> distance between the closest
        alien and the right of the window (the aliens should never go offscreen).
        </p>

        <p>
        Repeat this process back and forth.  When the aliens get to far to the left, move them
        down and start moving right again.  This suggests that <code>Wave</code> needs an
        extra attribute that keeps track of whether the aliens are moving right or left.
        </p>

        <a name="basic-speed"></a>
        <h3>Testing the Speed</h3>

        <p>
        The speed is what determines the difficulty of the game, so it is a good idea to
        test the game at different speeds. Just as you can change the number of rows and
        aliens per row, you can also change the speed from the command line.
        </p>

        <p>
        When you run your application (again, assuming that it is in a folder called
        <code>invaders</code>) try the command
        </p>

        <blockquote><code>
        python invaders 2 3 0.5
        </code></blockquote>

        <p>
        When you do this, Python changes the value of <code>ALIEN_ROWS</code> to 2, the value
        of <code>ALIENS_IN_ROW</code> to 3, and the value of <code>ALIEN_SPEED</code> 0.5.
        By varying this third number, you can make the aliens march faster or slower.  If your
        aliens do not move at different speeds when you try this, you have a problem that you
        need to fix before continuing.
        </p>

        <p>
        <b>Try to finish this part by Friday, April 26.</b>
        The speed delay is the hardest part of this challenge, and it is a great thing for you
        to get help on during the open office hours (replacing the labs) this week.  If you get
        this far, you will be in great shape to finish up the last week of class.
        </p>

        <hr width="50%">

        <a name="basic-bolts"></a>
        <h3>Fire Bolts from the Ship</h3>

        <p>
        Now that you are back from Thanksgiving break, it is time to fight back against the
        aliens.  You are going to give the ship the ability to fire laser bolts.
        </p>

        <h4>Creating a Laser Bolt</h4>

        <p>
        The game should create a laser bolt when the player presses a fire key.  The standard
        keys for firing the laser are space or up-arrow.  However, it can be anything that
        you want so long as it is clear to the player.
        </p>

        <p>
        When you detect a fire command, you should create a <code>Bolt</code> object.  This
        <code>Bolt</code> object should have the same <tt>x</tt> position as the ship, and it
        should be placed right in front of the ship's nose.  Use the constants in
        <code>const.py</code> to calculate this from the ship and bolt dimensions.
        </p>

        <p>
        Unlike the ship and alien classes, <code>Bolt</code> is a subclass of
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/grectangle.html"><code>GRectangle</code></a>.  It is very similar to
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gimage.html"><code>GImage</code></a>, except that you specify a
        <tt>fillcolor</tt> and a <tt>linecolor</tt> instead of a image file.  We do not expect
        your laser bolt to be anything fancy.
        </p>

        <p>
        <code>Bolt</code> objects are stored in the <code>_bolts</code> attribute of
        <code>Wave</code>.  This is a one-dimensional list that may be empty (because there
        are no bolts on the screen).  You draw the bolts in much the same way that you draw
        the aliens.
        </p>

        <h4>Customizing the <code>Bolt</code> Class</h4>

        <p>
        Up until now, we have not needed to add additional attributes to any of our model classes.
        While the aliens march across the screen, they all march in lock-step.  However, some
        laser bolts will be moving upwards, and some will be moving downwards.  Therefore, we need
        to add an attribute in <code>Bolt</code> to keep track of the velocity.
        </p>

        <p>
        This means that you will need to override the <code>__init__</code> method in
        <code>GRectangle</code> and provide your own.  We do not care what the parameters for
        this method are. That is up to you.  The velocity should either be <code>BOLT_SPEED</code>
        for bolts that are going up, or <code>-BOLT_SPEED</code> for bolts going down.
        </p>

        <p>
        Because we will later have the aliens fire their own bolts, you want to be able to
        distinguish bolts shot from the player from those shot from an alien.  We suggest that
        you add a method like <code>isPlayerBolt</code> to the class.  Remember that all bolts
        that travel up are fired by the player.
        </p>

        <h4>Moving the Laser Bolt</h4>

        <p>
        You move a laser bolt in much the same way that you moved the ship and aliens.  You just
        add the velocity to the <code>y</code> position.  Like the ship, and unlike the aliens,
        you move the bolt every animation frame.  You do not have to stagger the movement.
        </p>

        <h4>Removing the Laser Bolt</h4>

        <p>
        Right now, your laser bolt will pass through aliens.  That is okay.  We will worry about
        the aliens later.  However, we do want you to delete the bolt when it goes off screen.
        To do this, simply check if the bottom of the bolt is above the height of the game window.
        If so, delete the bolt from the list <code>_bolts</code> in <code>Wave</code>.  The
        bolt will no longer be drawn and the object will be deleted.  See the sample code
        <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/schedule/code/22/pyro.py">pyro.py</a> for an example of how to do this.
        </p>

        <h4>Important Considerations</h4>

        <p>
        There is an important restriction on laser bolts that you must implement at this time.
        The player may only have one laser bolt on the screen at a time.  The player cannot
        fire a new bolt until this bolt goes off screen and is deleted.
        </p>

        <p>
        Keep in mind that <code>_bolts</code> will eventually have multiple laser bolts in the
        list even though only one of them will belong to the player.  This is the reason for
        the <tt>isPlayerBolt</tt> method we suggested.  Look at every bolt in the list.
        If one of them is a player bolt, the player cannot fire.  Otherwise, the player is
        free to fire.
        </p>

        <p>
        <b>Try to finish this part by Monday, April 29</b>, after coming back from break.
        </p>

        <hr width="50%">

        <a name="basic-retaliate"></a>
        <h3>Fire Bolts from the Aliens</h3>

        <p>
        The ship should not be only thing to fire laser bolts.  The aliens get to fire bolts as
        well.  The process should be very similar to the laser bolts for the ship.  You create
        a <code>Bolt</code> object (though this time its velocity is <code>-BOLT_SPEED</code>),
        add it to the list <code>_bolts</code>, draw it, and move it across the screen.  An
        alien bolt should be removed when it goes off the screen, which is when the top of the
        bolt is less than 0.
        </p>

        <p>
        However, there is a tricky part about the alien bolts.  There a lot of aliens.  So you
        need to control which aliens fire and when.  First of all, aliens should only fire when
        they walk. That means that the faster they walk, the faster they fire. Alien speed is
        the main difficulty in <em>Space Invaders</em>, so this makes sense.
        </p>

        <h4>Picking When to Fire</h4>

        <p>
        While we could have the aliens fire every time they step, that would make the game hard.
        But we also do not want them to fire too slow, as that makes the game to easy.  What we
        want is for the aliens to fire <em>randomly</em>.  Sometimes they fire slow and sometimes
        they fire fast.
        </p>

        <p>
        In <code>consts.py</code> you will see the <code>BOLT_RATE</code>.  This is the number
        of steps between alien shots.  So if it is 5, the aliens can take up to five steps before
        one of them shoots.  If it is 10, they can take up to ten steps between shots.
        </p>

        <p>
        At the start of the wave, you should use the
        <a href="http://docs.python.org/3/library/random.html">random</a> module to pick a number
        between 1 and <code>BOLT_RATE</code>. You have already had some experience with this
        module in a lab.  That number should be stored in an attribute in <code>Wave</code>; it
        is the number of steps until the aliens fire.  When the aliens are ready to fire, you
        create a <code>Bolt</code>.  You will also generate another number between 1 and
        <code>BOLT_RATE</code> for the next laser bolt.
        </p>

        <h4>Picking Who to Fire</h4>

        <p>
        The laser bolts have to come from an alien.  To pick an alien, you should first pick
        a <em>nonempty</em> column of aliens at random.  Note the invariant of <code>_aliens</code>
        says that the table of aliens can have <code>None</code> as an entry (which happens
        when an alien is destroyed).  You do not want to pick a column where all of the rows
        are <code>None</code>.  But otherwise, you should use the
        <a href="http://docs.python.org/3/library/random.html">random</a> module to pick the
        column.
        </p>

        <p>
        Next, you should identify the bottommost alien in the column.  Again, because aliens
        may be destroyed, you should not pick a position where the alien is <code>None</code>.
        Search the column and find the alien on the bottom.
        </p>

        <p>
        Once you have done that, you can create the <code>Bolt</code> object.  The bolt should
        have the same <code>x</code> position as the alien.  The top of the bolt should be just
        below the feet of the alien.
        </p>

        <p>
        <b> Try to finish this part by Wednesday, May 1</b>.  This is one of the trickier
        parts of the assignment, but you have now built up enough skills that you should be
        able to do this in a day.
        </p>

        <hr width="50%">

        <a name="basic-collisions"></a>
        <h3>Handle Bolt Collisions</h3>

        <p>
        You should have a lot of laser bolts flying back and forth, but they are all pretty
        useless right now. It is time to give them some bite.  You need to detect collisions
        and remove any aliens (and the player) that are killed by a bolt.
        </p>

        <p>
        How do you detect collisions? Suppose the bolts were a single point (<i>x</i>,<i>y</i>)
        rather than a rectangle. Then, for any <code>GObject</code> <code>gobj</code>, the method
        call
        </p>

        <blockquote><code>
        gobj.contains((x,y))
        </code></blockquote>

        <p>
        returns <code>True</code> if the point is inside of the object and <code>False</code> if
        it is not. Since both <code>Ship</code> and <code>Alien</code> are sub(sub)classes of
        <code>GObject</code>, they inherit this method.
        </p>

        <p>
        However, the bolt is not a single point. It occupies physical area, so it may collide
        with something on the screen even though its center does not. The easiest thing to do
        — which is typical of the simplifying assumptions made in real computer games
        — is to check the four corners of the bolt and see if any of them are inside
        of the object.  Because the bolt is <em>smaller</em> than either the ship or an
        alien, we can guarantee that one of these four corners is inside of the object during
        a collision.
        </p>

        <p>
        You should add the method <code>collides</code> to both the class <code>Ship</code>
        and <code>Alien</code>.  This method returns <code>True</code> if a bolt (fired by the other side)
        has collided with the instance <code>self</code> of that class.  For example, here is
        our specification of <code>collides</code> in <code>Alien</code>:
        </p>

        <pre class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">collides</span><span class="hljs-params">(self,bolt)</span>:</span>
        <span style="color:008800"><span class="hljs-string">"""
        Returns: True if the bolt was fired by the player and collides with this alien

        Parameter bolt: The laser bolt to check
        Precondition: bolt is of class Bolt
        """</span></span>
        </pre>

        <p>
        These methods will be similar, except for one important difference.  The method
        in <code>Ship</code> will only return <code>True</code> if the bolt was fired by an alien (e.g. it
        is going down).  In <code>Alien</code> it will only return <code>True</code> if the bolt was fired
        by the ship (e.g. it is going up).
        </p>

        <p>
        If you detect a collision between an bolt and an alien, you should set that position
        of the table <code>_aliens</code> to <code>None</code> <em>and</em> remove the bolt from
        the list.  Similarly,if you detect a collision between a bolt and the ship, you should set <code>_ship</code>
        to <code>None</code> and remove the bolt from the list.
        </p>

        <p>
        When you make this change, you are probably going to have to go back and make some
        changes to other parts of your code.  You are going to start running into
        <code>NoneType</code> errors in the code for marching the aliens and drawing the aliens.
        That is because  some of the aliens may now be <code>None</code>.  You have to prepare your code
        to deal with this.  Every time you access <code>_ship</code> or an element of
        <code>_aliens</code>, you must check for <code>None</code> before continuing.
        </p>

        <p>
        Once you have completed this, you should be able to start playing a game.
        </p>

        <p>
        <b>Try to finish this part by Friday, May 3.</b>. This is the vast majority
        of the assignment and will allow to you completely finish everything by the end of
        classes.
        </p>

        <hr width="50%">

        <a name="basic-finish"></a>
        <h3>Finish the Game</h3>

        <p>
        You now have a (mostly) working game.  However, there are two minor details left for you
        to take care of before you can say that the game is truly finished.
        </p>

        <h4>Player Lives</h4>

        <p>
        When the <code>_ship</code> attribute becomes <code>None</code>, the player cannot really do much
        any more.  What should happen in this case is that the player should lose a life.
        The player should have three lives before losing the game.  You will notice an
        attribute call <code>_lives</code> in <code>Wave</code> for managing these lives.
        </p>

        <p>
        If the player still has lives left after losing a ship, the <code>update</code> method
        in <code>Invaders</code> should change the state to <code>STATE_PAUSED</code> and
        display a message (as you did on the welcome screen) that the player press 'S' to
        continue.  As soon as the player presses this key, switch the state back to
        <code>STATE_ACTIVE</code> and start the game again.  The wave should continue where it
        left off.
        </p>

        <h4>Winning or Losing</h4>

        <p>
        Eventually the wave of aliens will end. Each time the player loses a life, you need to
        check if there are any lives left.  If not, the game is over.  Additionally, the game
        is over if (1) all the aliens are killed or (2) any alien dips below the defense line.
        Both of the latter need to be checked in the <code>update</code> method of <code>Wave</code>.
        You might want to add an extra attribute to keep track of when either of these happen.
        </p>

        <p>
        When the wave ends, and the player has either won or lost, you should put up one last
        message.  Use a <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/glabel.html"><code>GLabel</code></a> to put up a congratulating (or admonishing) message.
        Finally, you should change the state one last time to indicate that the game is over.
        This is the purpose of the state <code>STATE_COMPLETE</code>.
        </p>

        <p>
        <b>Try to finish this part by Sunday, May 5</b>.
        </p>

        <hr>

        <a name="extend"></a>
        <h2>Extending the Game</h2>

        <p>
        If you have followed our suggested timeline, you now have three days to extend the game and
        try to make it more fun.  In doing this, you might find yourself reorganizing a lot of the
        code above.  You may add new methods or change any of the methods you have written.
        You may add new classes. For example, you might want to add a class for a boss alien
        that is different from a regular alien. You can even completely rewrite existing classes
        like <code>Alien</code> to support cool animations.
        </p>

        <p>
        <b>You are allowed to change anything you want so long as you update the specifications
        to reflect the changes.</b>  There are only four things that you are not allowed to change.
        </p>

        <ul>
                <li style="margin-top:5pt">
                The win (destroy all aliens) and lose (lose all lives, break the defense line) conditions must remain the same.
                </li>
                <li style="margin-top:5pt">
                The aliens must be generated two rows at a time, bottom to top (though each row can have some special aliens).
                </li>
                <li style="margin-top:5pt">
                The aliens must <em>start</em> marching at the speed <code>ALIEN_SPEED</code>
                </li>
                <li style="margin-top:5pt">
                The ship should never move off screen (aliens can, if creating attack waves).
                </li>
        </ul>

        <p>
        Everything else is fair game.  However, we highly suggest that you <b>save a copy of the
        basic game in a separate folder before you start to make major changes</b>.  That way you
        have something to revert to if things go seriously awry when implementing your extensions.
        Also, we suggest that you make sure to comment your code well in order to keep track of where
        you are in the coding process.
        </p>

        <p>
        Extensions are worth roughly eight points of your final grade.  With no extensions at all,
        you can still make a 92/100 on this assignment (which is an A- for an assignment grade).
        If you give us at least two solid extensions (see the suggestions below), we will give
        you those eight points.  If you are unsure of whether an extension is "good enough,"
        ask on Piazza.
        </p>

        <p>
        If you give us more than two extensions, we will treat this as a form of <em>extra credit</em>.
        While we will not allow you to go over the maximum score, this will allow you to earn back
        any points that you might miss for implementing a feature incorrectly. However, your cannot
        get back any points lost for writing bad specifications or for violating the 30-line rule,
        no matter how good your extensions are.
        </p>

        <hr width="50%">

        <a name="expand-extensions"></a>
        <h3>Possible Extensions</h3>

        <p>
        Here are some possible ways to extend the game, though you should not be constrained by
        any of them.  Make the game you want to make.  We will reward originality more than
        we will reward quantity.  While this is a fairly simple game, the design space is
        wide open with possibilities.
        </p>

        <h4>Multiple Waves</h4>

        <p>
        The easiest extension is to implement multiple waves.  If the player completes a wave
        without losing all the ship lives, it is time for a new wave of aliens.  This is really easy,
        since all you have to do is make a new <code>Wave</code> object.
        </p>

        <p>
        For this to count as a proper extension, we want each wave to increase the alien speed.
        The alien speed is what makes the game difficult, and the game should get more difficult
        with each wave.  You will have to add some attributes to <code>Wave</code> to keep track
        of this. You will also need modify the <code>__init__</code> method so that
        <code>Invaders</code> can increase the speed each time it makes a new wave.
        </p>


        <h4>Implement Sound Effects</h4>

        <p>
        Another easy extension is to add appropriate sounds for game events.  We have provided
        several audio files in <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/files/code.zip">code.zip</a>.  You will want to look at them, but
        you are not restricted to only those sounds. Remember that it is a violation of the Academic
        Integrity Policy to use <a href="http://www.cs.cornell.edu/courses/cs1110/2019sp/assignments/a7/#academic-copyright">unlicensed copyrighted material</a>.
        </p>

        <p>
        To load an audio file, you simply create a <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/sound.html"><code>Sound</code></a>
        object as follows:
        </p>

        <blockquote><code>
        pewSound = Sound(<span style="color:008800">'pew1.wav'</span>)
        </code></blockquote>

        <p>
        Once it is loaded, you can play it whenever you want (such as when the ship fires the laser)
        by calling <code>pewSound.play()</code>. The sound might get monotonous after awhile,
        so make the sounds vary, and figure out a way to let the user turn sound off (and on).
        </p>

        <p>
        Read the <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/sound.html">online specification</a> to see how to use Sound objects.
        In particular, if you want to play the same sound multiple times simultaneously (such as
        if two aliens fire simultaneously), you will need two different <code>Sound</code> objects
        for the same sound file.
        </p>

        <h4>Dynamically Speed Up the Aliens</h4>

        <p>
        The aliens in <em>Space Invaders</em> do not just speed up when you start a new wave.  They
        also speed up as you kill aliens.  This is actually a result of a
        <a href="http://www.cracked.com/article_19262_6-glitches-that-accidentally-invented-modern-gaming.html">bug
        in the original <i>Space Invaders</i></a>, but it was left in because it made the game fun.
        </p>

        <p>
        To make the aliens move faster, you need to make the speed value smaller.  A speed value
        of 1.0 means they march every second, while 0.5 means they march every half second. So
        the easiest way to increase the speed is to multiply by some number less than one each
        time you kill an alien.  Do not make the multiplication factor too small, or else the
        aliens will jump to lightning speed.  You will discover that a factor of 0.97 is
        reasonably challenging.
        </p>


        <h4>Keep Track of Score</h4>

        <p>
        A large part of the challenge of <i>Space Invaders</i> is getting a high score.  Aliens
        in the front are worth a few points and aliens in the back are worth less.  You should
        display the score at all times using a <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/glabel.html"><code>GLabel</code></a>
        object.  Where you display it is up to you (except do not keep the player from seeing
        the aliens or ship).  <b>Please do not make a new <code>GLabel</code> object each time the
        score changes</b>.  This will slow down the program tremendously. Simply change the
        <code>text</code> attribute in your <code>GLabel</code> object.
        </p>

        <p>
        In classic <i>Space Invaders</i>, this score carries over between waves.  If you chose
        to implement multiple waves, then each wave after the first should start with the score
        from the previous wave.
        </p>

        <h4>Animate the Aliens</h4>

        <p>
        In the video at the start of the animation, you will notice that the aliens are animated
        as they move and that they have simple explosion animations.  These animations are
        actually made available to you as <em>filmstrips</em>.  A filmstrip is single image file
        that holds multiple animation frames.  These frames are arranged in a rectangular grid
        where each frame has equal size. For example, <code>alien-strip1.png</code> is 3x2
        grid of animation frames.  The first row is the alien walking.  The other two rows animate
        the alien explosion.
        </p>

        <p>
        To use a filmstrip, you need to make a <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gsprite.html"><code>GSprite</code></a>
        object as follows:
        </p>

        <blockquote><code>
        alien = GSprite(width=...,height=...,source=<span style="color:008800">'alien-strip1.png'</span>,format=(3,2))
        </code></blockquote>

        <p>
        The <code>GSprite</code> class has an attribute called <code>frame</code> which tracks
        which frame in the filmstrip is currently displayed.  At the start, the frame is always
        0, showing the alien in the top-left corner.  To walk the alien, you just add the
        following code to your march update
        </p>

        <blockquote><code>
        alien.frame = (alien.frame+1) % 2
        </code></blockquote>

        <p>
        You are free to use these filmstrips (also called <em>sprite sheets</em>) or make your own.
        The <a href="http://draeton.github.io/stitches/">Stitches website</a> is a great resource
        for making filmstrips.
        </p>

        <h4>Defense Barriers</h4>

        <p>
        The classic <i>Space Invaders</i> has defense barriers that the player can hide behind.
        These barriers are damaged by laser bolts fired by either the player or the aliens.
        They provide a bit of respite when the aliens are moving very fast.
        </p>

        <p>
        The original game destroys the barriers a pixel at a time.  This is extremely hard to do
        with the classes that we have provided you, and impossible without accessing hidden
        attributes (you have to perform <a href="https://kivy.org/docs/api-kivy.graphics.texture.html">texture blitting</a>
        on the <code>_texture</code> attribute in <code>GImage</code> or <code>GSprite</code>).
        So we do not recommend this approach at all.
        </p>

        <p>
        However, a simpler approach is to just give the defense barriers a health meter.  As the
        bolts hit the barrier it is weakened and eventually destroyed.  You can even use
        <a href="https://www.cs.cornell.edu/courses/cs1110/2018fa/assignments/assignment7/api/gsprite.html"><code>GSprite</code></a> to change the barrier appearance
        as it weakens.
        </p>

        <h4>Use your imagination</h4>

        <p>
        What else have you always wanted a game like this to do?  Do you want to have swooping
        aliens like in <i><a href="https://en.wikipedia.org/wiki/Galaxian">Galaxian</a></i> and
        <i><a href="https://en.wikipedia.org/wiki/Galaga">Galaga</a></i>?  Should aliens drop
        power-ups that give the ship rapid laser fire?  Do not go too wild with the power-ups,
        however. We much prefer a few innovations that greatly improvevthe play as opposed to
        a screen filled with gizmos.
        </p>

        <p>
        Again, you can make any modifications to the gameplay you want, but the core gameplay of
        ships and marching aliens should be there.  Please do not submit a copy of
        <i><a href="http://en.wikipedia.org/wiki/Asteroids_(video_game)">Asteroids</a></i> and
        expect to receive credit.
        </p>

        <hr>

        <a name="finishing"></a>
        <h2>Completing the Assignment</h2>

        <p>
        Before submitting anything, test your program to see that it works. Play for a while and
        make sure that as many parts of it as you can check are working. Remember to check both
        of the lose conditions, not just the loss of three lives.
        </p>

        <p>
        When you are done, reread the specifications of all your methods and functions (including
        those we stubbed in for you), and be sure that your specifications are clear and that your
        functions follow their specifications. If you implemented extensions, make sure your
        documentation makes it very clear what your extensions are.
        </p>

        <p>
        As part of this assignment, we expect you to follow our style guidelines:
        </p>

        <ol>
                <li style="margin-top:3pt">
                There are no tabs in the file, only spaces
                </li>
                <li style="margin-top:3pt">
                Classes are separated from each other by two blank lines
                </li>
                <li style="margin-top:3pt">
                Methods are separated from each other by a single blank line
                </li>
                <li style="margin-top:3pt">
                Class contents are ordered as follows: getters/setters, initializer, non-hidden methods, hidden methods
                </li>
                <li style="margin-top:3pt">
                Lines are short enough that horizontal scrolling is not necessary (about 80 chars is long enough)
                </li>
                <li style="margin-top:3pt">
                The specifications for all of the methods and properties are complete
                </li>
                <li style="margin-top:3pt">
                Specifications are immediately after the method header and indented
                </li>
                <li style="margin-top:3pt"><b>
                <b>No method is more than 30 lines long, not including the specification</b>
                </b></li>
        </ol>

        <hr width="50%">

        <a name="finishing-turnin"></a>
        <h3>Turning it In</h3>

        <p>
        You are potentially modifying a lot of files in this assignment.  At a bare minimum,
        your are modifying <code>app.py</code>, <code>wave.py</code>, and <code>models.py</code>.
        You might be modifying <code>consts.py</code>. You might have extra art and sound files.
        </p>

        <p>
        In addition, you should create a text file called <code>extensions.txt</code>.  In
        this file, you should write a <b>brief description of your extensions</b>. Tell us
        what you were trying to do and how you did it.  If you used any art or sound assets that
        required an attribution license, you should put that attribution here.
        </p>

        <p>
        To simplify the submission process, we are not asking you upload each individual file.
        Instead, put all your files in a zip file called <code>a7.zip</code> and submit this
        instead.  We need to be able to play  your game, and if anything is missing, we cannot
        play it.
        </p>

        <hr width="50%">

        <a name="finishing-survey"></a>
        <h3>Survey</h3>

        <p>
        One last time, we need you to do a survey.  The survey should be done individually (even
        if you worked in a group).  As always, the survey will ask about things such as how
        long you spent on the assignment and your impression of the difficulty. Please try to
        complete the survey within a day of turning in this assignment. Remember that
        participation in surveys comprises 1% of your final grade.
        </p>

        <br>
                
        
        
                
                
                
				  <p><em>Author</em>: W. White</p>
                
        
        

        <div style="height: 75px;"></div>




<script src="./Assignment 7 CS 1110_files/jquery.min.js"></script>
<script src="./Assignment 7 CS 1110_files/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<script>$('#project-wrapper').scrollspy({ target: '#project-navbar' })</script>

<link rel="stylesheet" href="./Assignment 7 CS 1110_files/atom-one-dark.min.css">
<script src="./Assignment 7 CS 1110_files/highlight.min.js"></script>
<script>
$(document).ready(function() {
  hljs.configure({
  languages: ["py","cpp", "makefile"]
  });
  $('pre').each(function(i, block) {
     hljs.highlightBlock(block);
  });
});
</script>

</div></div></div></div></body></html>